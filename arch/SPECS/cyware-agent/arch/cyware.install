DIR="PARAM_INSTALLATION_DIR"
SCRIPTS_DIR="PARAM_INSTALLATION_SCRIPTS_DIR"
CYWARE_TMP_DIR="${DIR}/packages_files/agent_config_files"
SCA_BASE_DIR="${SCRIPTS_DIR}/sca"
USER="cyware"
GROUP="cyware"

common() {
    # Install the SCA files
    if [ -d "${SCA_BASE_DIR}" ]; then

        . ${SCRIPTS_DIR}/src/init/dist-detect.sh

        SCA_DIR="${DIST_NAME}/${DIST_VER}"

        SCA_TMP_DIR="${SCA_BASE_DIR}/${DIST_NAME}/${DIST_VER}"
        mkdir -p ${DIR}/ruleset/sca

        # Install the configuration files needed for this hosts
        if [ -r "${SCA_BASE_DIR}/${DIST_NAME}/${DIST_VER}/${DIST_SUBVER}/sca.files" ]; then
            SCA_TMP_DIR="${SCA_BASE_DIR}/${DIST_NAME}/${DIST_VER}/${DIST_SUBVER}"
        elif [ -r "${SCA_BASE_DIR}/${DIST_NAME}/${DIST_VER}/sca.files" ]; then
            SCA_TMP_DIR="${SCA_BASE_DIR}/${DIST_NAME}/${DIST_VER}"
        elif [ -r "${SCA_BASE_DIR}/${DIST_NAME}/sca.files" ]; then
            SCA_TMP_DIR="${SCA_BASE_DIR}/${DIST_NAME}"
        else
            SCA_TMP_DIR="${SCA_BASE_DIR}/generic"
        fi

        SCA_TMP_FILE="${SCA_TMP_DIR}/sca.files"

        if [ -r ${SCA_TMP_FILE} ]; then

            for sca_file in $(cat ${SCA_TMP_FILE}); do
                cp ${SCA_BASE_DIR}/${sca_file} ${DIR}/ruleset/sca
            done
        fi

        # Set correct permissions, owner and group
        chmod 640 ${DIR}/ruleset/sca/*
        chown root:${GROUP} ${DIR}/ruleset/sca/*

    fi

    touch ${DIR}/logs/active-responses.log
    chown ${USER}:${GROUP} ${DIR}/logs/active-responses.log
    chmod 0660 ${DIR}/logs/active-responses.log

    # Register and configure agent if Cyware environment variables are defined
    if [ -z "$2" ] ; then
        ${SCRIPTS_DIR}/src/init/register_configure_agent.sh ${DIR} > /dev/null || :
    fi

    # Restoring file permissions
    ${SCRIPTS_DIR}/restore-permissions.sh > /dev/null 2>&1 || :

    # Remove the deprecated /etc/ossec-init.conf file
    if [ -f /etc/ossec-init.conf ] ; then
        rm -f /etc/ossec-init.conf
    fi

    ${SCRIPTS_DIR}/fix_owner.sh 2>/dev/null
}

pre_upgrade() {
    if [ ! -d ${CYWARE_TMP_DIR} ]; then
        mkdir -p ${CYWARE_TMP_DIR}
    fi
    if systemctl is-active --quiet cyware-agent > /dev/null 2>&1; then
        systemctl stop cyware-agent.service > /dev/null 2>&1
        touch ${CYWARE_TMP_DIR}/cyware.restart
    elif ${DIR}/bin/cyware-control status 2>/dev/null | grep "is running" > /dev/null 2>&1; then
        ${DIR}/bin/cyware-control stop > /dev/null 2>&1
        touch ${CYWARE_TMP_DIR}/cyware.restart
    fi
}

post_upgrade() {
    ${SCRIPTS_DIR}/gen_ossec.sh conf agent Arch rolling > ${DIR}/etc/ossec.conf.new
    chmod 660 ${DIR}/etc/ossec.conf.new

    common

    if [ -f ${CYWARE_TMP_DIR}/cyware.restart ] ; then
        rm -f ${CYWARE_TMP_DIR}/cyware.restart
        systemctl daemon-reload > /dev/null 2>&1
        systemctl restart cyware-agent.service > /dev/null 2>&1
    fi
}

post_install() {
    if ! getent group | grep -q "^${GROUP}" ; then
        systemd-sysusers
    fi

    if [ -f ${SCRIPTS_DIR}/ossec-init.conf ] ; then
        cp ${SCRIPTS_DIR}/ossec-init.conf /etc/ossec-init.conf
    fi

    ${SCRIPTS_DIR}/gen_ossec.sh conf agent Arch rolling > ${DIR}/etc/ossec.conf
    ${SCRIPTS_DIR}/add_localfiles.sh >> ${DIR}/etc/ossec.conf

    common
}

pre_remove() {
    systemctl disable cyware-agent.service 2>/dev/null || true
    if systemctl is-active --quiet cyware-agent > /dev/null 2>&1; then
        systemctl stop cyware-agent.service > /dev/null 2>&1
    elif ${DIR}/bin/cyware-control status 2>/dev/null | grep "is running" > /dev/null 2>&1; then
        ${DIR}/bin/cyware-control stop > /dev/null 2>&1
    fi
}

post_remove() {

    if [ -d ${CYWARE_TMP_DIR} ]; then
        rm -rf ${CYWARE_TMP_DIR}
    fi

    # If the directory is not empty, copy the files into ${DIR}/etc
    if ls -A ${DIR}/tmp/conffiles > /dev/null 2>&1 ; then
        if [ ! -d ${DIR}/etc ]; then
            mkdir -p ${DIR}/etc
        fi
        mv ${DIR}/tmp/conffiles/* ${DIR}/etc
    fi

    rm -rf ${DIR}/tmp
    rm -rf ${DIR}/ruleset
    rm -rf ${DIR}/var
    rm -rf ${DIR}/logs

}
